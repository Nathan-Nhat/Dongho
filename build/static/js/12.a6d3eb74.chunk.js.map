{"version":3,"sources":["Pages/OrdersPage.js"],"names":["GetFormattedDate","date_str","date","Date","month","getMonth","getDate","getFullYear","getHours","getMinutes","slice","useStyle","makeStyles","container","padding","body","cellHeader","fontWeight","backgroundColor","display","flexDirection","textAlign","status","width","margin","color","borderRadius","toolbar","marginBottom","search","border","opacity","float","flexGrow","filter","marginRight","OrdersPage","classes","useState","list","page","item_per_page","total_page","total","orderList","setOrderList","curStatus","setCurStatus","query","setQuery","startDate","getTime","endDate","datePicker","setDatePicker","useEffect","get_data","BACK_END_URL","iter_per_page","date_from","date_to","then","res","data","list_order","className","variant","required","value","onChange","e","target","selected","disableHoverListener","arrow","placement","title","Fragment","style","fontSize","paddingRight","onKeyDown","key","id","disableUnderline","name","startAdornment","paddingLeft","align","map","item","index","to","order_id","date_create","ordered_product","product","quantity","phone_number_1","phone_number_2","rowsPerPageOptions","component","count","rowsPerPage","onChangePage","event","newPage","onChangeRowsPerPage"],"mappings":"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","file":"static/js/12.a6d3eb74.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {\n    Table,\n    TableHead,\n    TableBody,\n    TableCell,\n    TableRow,\n    Paper,\n    Typography,\n    Select,\n    MenuItem,\n    FormControl, Input, InputAdornment\n} from \"@material-ui/core\";\nimport {get_data} from \"../ApiCall\";\nimport {BACK_END_URL} from \"../ServiceURL\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport SubdirectoryArrowRightRoundedIcon from \"@material-ui/icons/SubdirectoryArrowRightRounded\";\nimport SearchRoundedIcon from \"@material-ui/icons/SearchRounded\";\nimport {HtmlTooltip} from \"../Component/Product/Table.Product\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport DatePicker from \"react-datepicker\";\nimport './DatePicker.css'\nimport {NavLink} from \"react-router-dom\";\n\nexport function GetFormattedDate(date_str) {\n    var date = new Date(date_str);\n    var month = date.getMonth();\n    var day = date.getDate();\n    var year = date.getFullYear();\n    var hour = date.getHours()\n    var minute = (\"0\" + date.getMinutes()).slice(-2);\n    var time_day = day + \"/\" + month + \"/\" + year;\n    var time_hours = hour + \":\" + minute\n    return [time_day, time_hours]\n}\n\nconst useStyle = makeStyles({\n    container: {\n        padding: '1em'\n    },\n    body: {},\n    cellHeader: {\n        fontWeight: 'bold',\n        backgroundColor: '#cccccc'\n    },\n    date: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        textAlign: \"center\"\n\n    },\n    status: {\n        width: '136px',\n        margin: \"auto\",\n        padding: '0.25em',\n        color: 'white',\n        borderRadius: '3px',\n    },\n    toolbar: {\n        marginBottom: '1em',\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    search: {\n        border: '1px solid black',\n        // borderRadius : '1rem',\n        opacity: '70%',\n        float: 'right',\n        flexGrow: 1,\n        borderRadius: '5px',\n        backgroundColor: 'white',\n        '&>input': {\n            // borderRadius : '0 1rem 1rem 0',\n        }\n    },\n    filter: {\n        width: '200px',\n        marginRight: '2em',\n        backgroundColor: 'white'\n    }\n})\n\nconst OrdersPage = () => {\n    const classes = useStyle()\n    const [orderList, setOrderList] = useState({\n        list: [],\n        page: 1,\n        item_per_page: 10,\n        total_page: 1,\n        total: 0,\n    })\n    const [curStatus, setCurStatus] = useState(-1)\n    const handleStatusChange = (e) => {\n        setCurStatus(e.target.value)\n    }\n    const [query, setQuery] = useState('')\n    const [datePicker, setDatePicker] = useState({\n        startDate: new Date(new Date().getTime() - (30 * 24 * 60 * 60 * 1000)),\n        endDate: new Date()\n    })\n    const handleStartDateChange = (date) => {\n        setDatePicker({\n            ...datePicker,\n            startDate: date\n        })\n    }\n    const handleEndDateChange = (date) => {\n        setDatePicker({\n            ...datePicker,\n            endDate: date\n        })\n    }\n    useEffect(() => {\n        get_data(BACK_END_URL + 'admin/order', {\n            page: orderList.page,\n            iter_per_page: orderList.item_per_page,\n            status: curStatus,\n            query: query,\n            date_from: datePicker.startDate,\n            date_to: datePicker.endDate,\n        }, true)\n            .then(res => setOrderList({\n                page: res.data.page,\n                item_per_page: res.data.item_per_page,\n                list: res.data.list_order,\n                total_page: res.data.total_page,\n                total: res.data.total\n            }))\n    }, [orderList.page, orderList.item_per_page, curStatus, datePicker])\n    const handleChangePage = (event, newPage) => {\n        setOrderList({\n            ...orderList,\n            page: newPage + 1\n        });\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setOrderList({\n            ...orderList,\n            page: 1,\n            item_per_page: event.target.value\n        })\n    };\n    const handleChange = (e) => {\n        setQuery(e.target.value)\n    }\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            get_data(BACK_END_URL + 'admin/order', {\n                page: orderList.page,\n                iter_per_page: orderList.item_per_page,\n                status: curStatus,\n                query: query,\n                date_from: datePicker.startDate,\n                date_to: datePicker.endDate,\n            }, true)\n                .then(res => setOrderList({\n                    page: res.data.page,\n                    item_per_page: res.data.item_per_page,\n                    list: res.data.list_order,\n                    total_page: res.data.total_page,\n                    total: res.data.total\n                }))\n        }\n    }\n    return (\n        <div className={classes.container}>\n            <h2>Orders</h2>\n            <div className={classes.toolbar}>\n                <FormControl variant=\"outlined\" required className={classes.filter}>\n                    <Select\n                        value={curStatus}\n                        onChange={handleStatusChange}\n                    >\n                        <MenuItem value={-1}>Tất cả</MenuItem>\n                        <MenuItem value={0}>Mới</MenuItem>\n                        <MenuItem value={1}>Đang vận chuyển</MenuItem>\n                        <MenuItem value={2}>Đã nhận</MenuItem>\n                        <MenuItem value={3}>Hoàn</MenuItem>\n\n                    </Select>\n                </FormControl>\n                <DatePicker\n                    selected={datePicker.startDate}\n                    onChange={handleStartDateChange}\n                />\n                <DatePicker\n                    selected={datePicker.endDate}\n                    onChange={handleEndDateChange}\n                />\n                <HtmlTooltip disableHoverListener arrow={true} placement=\"bottom-start\"\n                             title={\n                                 <React.Fragment>\n                                     <Typography style={{fontSize: '0.7rem'}}>{`Press `}\n                                         <div style={{\n                                             border: \"1px solid #888a8c\",\n                                             padding: '0 0.5rem 0 0.5rem',\n                                             borderRadius: '3px',\n                                             display: 'inline-block'\n                                         }}>\n                                             <SubdirectoryArrowRightRoundedIcon\n                                                 style={{fontSize: '0.7rem', paddingRight: '0.3rem'}}/>\n                                             Enter\n                                         </div>\n                                         {` to search`}</Typography>\n                                 </React.Fragment>\n                             }\n                >\n                    <Input className={classes.search}\n                           onKeyDown={handleKeyDown}\n                           id=\"input-with-icon-textfield\" disableUnderline\n                           onChange={handleChange}\n                           name=\"search\"\n                           value={query}\n                           startAdornment={(<InputAdornment>\n                               <SearchRoundedIcon style={{paddingLeft: '0.5rem', paddingRight: '0.5rem'}}/>\n                           </InputAdornment>)}\n                    />\n                </HtmlTooltip>\n            </div>\n            <Paper className={classes.body}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell className={classes.cellHeader} align={'center'}>ID</TableCell>\n                            <TableCell className={classes.cellHeader} align={'center'}>DATE</TableCell>\n                            <TableCell className={classes.cellHeader} align={'center'}>STATUS</TableCell>\n                            <TableCell className={classes.cellHeader} align={'center'}>ORDER ITEMS</TableCell>\n                            <TableCell className={classes.cellHeader} align={'center'}>CUSTOMER</TableCell>\n                            <TableCell className={classes.cellHeader} align={'center'}>ACTIONS</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {\n                            orderList.list.map((item, index) => {\n                                return <TableRow key={index}>\n                                    <TableCell align={'center'}>\n                                        <NavLink to = {`/orders/${item.order_id}`}>\n                                        {`#${item.order_id}`}\n                                        </NavLink>\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        <div className={classes.date}>\n                                            <Typography>{GetFormattedDate(item.date_create)[0]}</Typography>\n                                            <Typography\n                                                style={{fontSize: '0.9em'}}>{GetFormattedDate(item.date_create)[1]}</Typography>\n                                        </div>\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        <p className={classes.status} style={{\n                                            backgroundColor: item.status === 0 ? '#c20000' : item.status === 1 ? '#c2ab00'\n                                                : item.status === 2 ? 'green' : 'grey'\n                                        }}>\n                                            {\n                                                item.status === 0 ? 'Mới' : item.status === 1 ? 'Đang vận chuyển'\n                                                    : item.status === 2 ? 'Đã nhận' : 'Hoàn'\n                                            }\n                                        </p>\n                                    </TableCell>\n                                    <TableCell align='center'>\n                                        {\n                                            item.ordered_product.map((item, index) => {\n                                                return <div key={index}>\n                                                    {item.product.name} x {item.quantity}\n                                                </div>\n                                            })\n                                        }\n                                    </TableCell>\n                                    <TableCell align={'center'}>\n                                        <div>{item.name}</div>\n                                        <div>{`${item.phone_number_1}`} {item.phone_number_2 !== \"\" ? `-${item.phone_number_2}` : ''}</div>\n                                    </TableCell>\n                                </TableRow>\n                            })\n                        }\n                    </TableBody>\n                </Table>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={orderList.total}\n                    rowsPerPage={orderList.item_per_page}\n                    page={orderList.page - 1}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n};\n\nexport default OrdersPage;"],"sourceRoot":""}